
#setwd("c:\\users\\hiltc010\\Downloads")
#getwd()

#Basic input
#fin <- read.csv("Future 500 Dataset.csv")

#Improved input - empty chars get NAs
fin<-read.csv("Future 500 Dataset.csv", na.strings=c(""))

head(fin, 20)
tail(fin)
str(fin) 
summary(fin)

#changing from non-factor to factor

fin$ID<-factor(fin$ID)
str(fin)

fin$Inception <- factor(fin$Inception)
str(fin)

#changing from char to num

a<-c("12","13","14","12","12")
typeof(a)

b<-as.numeric(a)
typeof(b)

#converting into numerics for factors
z<-factor(c("12","13","14","12","12"))
z2<-as.numeric(as.character(z))

#sub,gsub - gsub does all instances
#?sub

fin$Expenses <- gsub(" Dollars","",fin$Expenses)

fin$Expenses <- gsub(",","",fin$Expenses)
head(fin)

#remove dollar signs since it's a special char
fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)
head(fin)
str(fin)


fin$Growth <- gsub("%","",fin$Growth)


fin$Growth <- as.numeric(fin$Growth)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Expenses <- as.numeric(fin$Expenses)
summary(fin)

#find NAs - empties for chars don't get picked up - specify in import to treat as NA
head(fin,24)
fin[!complete.cases(fin),]
str(fin)



fin[fin$Revenue == 9746272,]

#ignore false and NAs from filter 
which(fin$Revenue == 9746272)
fin[which(fin$Revenue == 9746272),]

head(fin)

fin[which(fin$Employees ==45),]


#filtering: using is.na() for missing data

head(fin,24)

fin[is.na(fin$Expenses),]


#Removing records with missing data
fin_backup <- fin

fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]

#subset the mossing record dataset and then save the opposite to the new fin
fin[!is.na(fin$Industry),]
fin <- fin[!is.na(fin$Inception),]

#Resetting the dataframe index

rownames(fin) <- 1:nrow(fin)
fin

fin 
rownames(fin) <- NULL

#replacing data with factual analysis

fin[!complete.cases(fin),]

fin[is.na(fin$State) & fin$City=="New York","State"] <- "NY"
fin[is.na(fin$State) & fin$City=="San Francisco","State"] <-"CA"

#check;
fin[!complete.cases(fin),]

#Median imputation method #1
median(fin[,"Employees"], na.rm=TRUE)
med_emp_retail <- median(fin[fin$Industry=="Retail","Employees"], na.rm=TRUE)

fin[is.na(fin$Employees) & fin$Industry == "Retail",]
fin[is.na(fin$Employees) & fin$Industry == "Retail","Employees"] <- med_emp_retail

#check
fin[3,]

med_emp_finserv <- median(fin[fin$Industry=="Financial Services","Employees"], na.rm=TRUE)

fin[is.na(fin$Employees) & fin$Industry == "Financial Services",]
fin[is.na(fin$Employees) & fin$Industry == "Financial Services","Employees"] <- med_emp_finserv

fin[330,]

#Replacing missing data: Median imputation method part 2

fin[!complete.cases(fin),]

med_growth_constr <-median(fin[fin$Industry=="Construction", "Growth"], na.rm=TRUE)

med_growth_constr

fin[is.na(fin$Growth) & fin$Industry=="Construction",]

fin[is.na(fin$Growth) & fin$Industry=="Construction", "Growth"] <- med_growth_constr

fin[8,]

fin[!complete.cases(fin),]


#Replacing missing data: Median imputation method part 3

med_exp_constr <-median(fin[fin$Industry=="Construction", "Expenses"], na.rm=TRUE)

med_exp_constr

fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),]
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),"Expenses"] <-med_exp_constr

fin[!complete.cases(fin),]

#Replacing Missing Date: deriving values
#Revenue - Expenses = Profit

fin[is.na(fin$Profit),"Profit"] <- fin[is.na(fin$Profit),"Revenue"] - fin[is.na(fin$Profit),"Expenses"]

fin[c(8,42),]

fin[!complete.cases(fin),]
fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses),"Revenue"] - fin[is.na(fin$Expenses),"Profit"]

fin[15,]

#ViZ
library(ggplot2)

#a scatterplot classified by industry

p <-ggplot(data=fin)
p + geom_point(aes(x=Revenue, y=Expenses,
                   colour=Industry, size=Profit))

#a scatterplot that includes industry trends for the expenses
d <- ggplot(data=fin, aes(x=Revenue, y=Expenses,
                         colour=Industry))
d + geom_point() +
  geom_smooth(fill=NA, size=1.2)

#boxplot

f <- ggplot(data=fin, aes(x=Industry, y=Growth,
                          colour=Industry))

f + geom_boxplot(size=1)

#extra

f + geom_jitter() +
    geom_boxplot(size=1, alpha=0.5, outlier.color=NA)


